require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [2, 25], $V1 = [1, 9], $V2 = [1, 16], $V3 = [1, 19], $V4 = [1, 7], $V5 = [1, 8], $V6 = [1, 10], $V7 = [1, 11], $V8 = [1, 12], $V9 = [1, 14], $Va = [1, 15], $Vb = [1, 17], $Vc = [1, 18], $Vd = [1, 20], $Ve = [1, 19, 23, 24], $Vf = [1, 28], $Vg = [1, 29], $Vh = [1, 30], $Vi = [1, 31], $Vj = [1, 32], $Vk = [1, 33], $Vl = [1, 34], $Vm = [1, 35], $Vn = [1, 36], $Vo = [1, 37], $Vp = [1, 38], $Vq = [1, 39], $Vr = [1, 40], $Vs = [1, 41], $Vt = [1, 42], $Vu = [1, 46], $Vv = [1, 10, 12, 19, 23, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47], $Vw = [1, 10, 12, 19, 23, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49], $Vx = [2, 26], $Vy = [1, 10, 12, 19, 23, 24, 31, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47], $Vz = [1, 10, 12, 19, 23, 24, 43, 45, 46, 47], $VA = [2, 9], $VB = [1, 10, 12, 19, 23, 24, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47], $VC = [1, 10, 12, 19, 23, 24, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47], $VD = [2, 5], $VE = [1, 10, 12, 19, 23, 24, 47], $VF = [1, 88], $VG = [1, 6, 8, 13, 17, 19, 21, 23, 24, 26, 27, 28, 29, 30, 32, 44, 48];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "expression": 3, "statements": 4, "function": 5, "func": 6, "arg": 7, "(": 8, "func_arg_list": 9, ")": 10, "block": 11, ",": 12, "NAME": 13, "arg_list": 14, "e": 15, "statement": 16, "ret": 17, "{": 18, "}": 19, "if_block": 20, "if": 21, "else": 22, ";": 23, "EOF": 24, "var": 25, "NUMBER": 26, "true": 27, "false": 28, "PI": 29, "E": 30, "+": 31, "-": 32, "*": 33, "/": 34, "%": 35, "^": 36, "gt": 37, "gte": 38, "lt": 39, "lte": 40, "eq": 41, "neq": 42, "and": 43, "not": 44, "or": 45, "?": 46, ":": 47, "let": 48, "=": 49, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "func", 8: "(", 10: ")", 12: ",", 13: "NAME", 17: "ret", 18: "{", 19: "}", 21: "if", 22: "else", 23: ";", 24: "EOF", 26: "NUMBER", 27: "true", 28: "false", 29: "PI", 30: "E", 31: "+", 32: "-", 33: "*", 34: "/", 35: "%", 36: "^", 37: "gt", 38: "gte", 39: "lt", 40: "lte", 41: "eq", 42: "neq", 43: "and", 44: "not", 45: "or", 46: "?", 47: ":", 48: "let", 49: "=" },
        productions_: [0, [3, 1], [5, 6], [9, 3], [9, 1], [9, 0], [7, 1], [14, 3], [14, 1], [14, 0], [16, 1], [16, 2], [11, 3], [20, 5], [20, 7], [20, 7], [4, 3], [4, 2], [4, 3], [4, 2], [4, 1], [4, 3], [4, 2], [4, 2], [4, 2], [4, 0], [25, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 3], [15, 3], [15, 3], [15, 3], [15, 3], [15, 3], [15, 3], [15, 2], [15, 3], [15, 3], [15, 3], [15, 3], [15, 3], [15, 3], [15, 3], [15, 2], [15, 3], [15, 5], [15, 4], [15, 4], [15, 2], [15, 3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0];
                    break;
                case 2:
                    this.$ = { type: 'function', args: $$[$0 - 2], body: $$[$0], name: $$[$0 - 4] };
                    break;
                case 3:
                    this.$ = $$[$0];
                    this.$.unshift($$[$0 - 2]);
                    break;
                case 4:
                case 8:
                    this.$ = [$$[$0]];
                    break;
                case 5:
                case 9:
                    this.$ = [];
                    break;
                case 6:
                    this.$ = yytext;
                    break;
                case 7:
                    this.$ = $$[$0];
                    this.$.unshift($$[$0 - 2]);
                    break;
                case 10:
                    this.$ = { type: 'stmt', children: [$$[$0]] };
                    break;
                case 11:
                    this.$ = { type: 'ret_stmt', children: [$$[$0]] };
                    break;
                case 12:
                    this.$ = { type: 'block', children: [$$[$0 - 1]] };
                    break;
                case 13:
                    this.$ = { type: 'if', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 14:
                case 15:
                    this.$ = { type: 'if_else', children: [$$[$0 - 4], $$[$0 - 2], $$[$0]] };
                    break;
                case 16:
                case 18:
                    this.$ = $$[$0];
                    this.$.children.unshift($$[$0 - 2]);
                    break;
                case 17:
                case 19:
                    this.$ = $$[$0];
                    this.$.children.unshift($$[$0 - 1]);
                    break;
                case 20:
                    this.$ = { type: 'statements', children: [$$[$0]] };
                    break;
                case 21:
                    this.$ = { type: 'statements', children: [$$[$0 - 2]] };
                    break;
                case 22:
                case 23:
                case 24:
                    this.$ = { type: 'statements', children: [$$[$0 - 1]] };
                    break;
                case 25:
                    this.$ = { type: 'statements', children: [] };
                    break;
                case 26:
                    this.$ = '__' + yytext;
                    break;
                case 27:
                    this.$ = { type: 'const', value: Number(yytext) };
                    break;
                case 28:
                    this.$ = { type: 'const', value: 'true' };
                    break;
                case 29:
                    this.$ = { type: 'const', value: 'false' };
                    break;
                case 30:
                    this.$ = { type: 'var', name: $$[$0] };
                    break;
                case 31:
                    this.$ = { type: 'const', value: Math.PI };
                    break;
                case 32:
                    this.$ = { type: 'const', value: Math.E };
                    break;
                case 33:
                    this.$ = { type: 'bracket', children: [$$[$0 - 1]] };
                    break;
                case 34:
                    this.$ = { type: 'plus', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 35:
                    this.$ = { type: 'minus', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 36:
                    this.$ = { type: 'mul', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 37:
                    this.$ = { type: 'div', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 38:
                    this.$ = { type: 'mod', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 39:
                    this.$ = { type: 'pow', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 40:
                    this.$ = { type: 'uminus', children: [$$[$0]] };
                    break;
                case 41:
                    this.$ = { type: 'gt', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 42:
                    this.$ = { type: 'gte', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 43:
                    this.$ = { type: 'lt', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 44:
                    this.$ = { type: 'lte', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 45:
                    this.$ = { type: 'eq', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 46:
                    this.$ = { type: 'neq', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 47:
                    this.$ = { type: 'and', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 48:
                    this.$ = { type: 'not', children: [$$[$0]] };
                    break;
                case 49:
                    this.$ = { type: 'or', children: [$$[$0 - 2], $$[$0]] };
                    break;
                case 50:
                    this.$ = { type: 'tri', children: [$$[$0 - 4], $$[$0 - 2], $$[$0]] };
                    break;
                case 51:
                    this.$ = { type: 'func', name: $$[$0 - 3], children: $$[$0 - 1] };
                    break;
                case 52:
                    this.$ = { type: 'declare_assign', name: $$[$0 - 2], children: [$$[$0]] };
                    break;
                case 53:
                    this.$ = { type: 'declare', name: $$[$0] };
                    break;
                case 54:
                    this.$ = { type: 'assign', name: $$[$0 - 2], children: [$$[$0]] };
                    break;
            }
        },
        table: [{ 1: $V0, 3: 1, 4: 2, 5: 5, 6: $V1, 8: $V2, 13: $V3, 15: 6, 16: 3, 17: $V4, 20: 4, 21: $V5, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 1: [3] }, { 1: [2, 1] }, o($V3, [2, 20], { 23: [1, 21], 24: [1, 22] }), o($V3, $V0, { 16: 3, 20: 4, 5: 5, 15: 6, 25: 13, 4: 23, 6: $V1, 8: $V2, 13: $V3, 17: $V4, 21: $V5, 23: [1, 24], 24: [1, 25], 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }), o($V3, $V0, { 16: 3, 20: 4, 5: 5, 15: 6, 25: 13, 4: 26, 6: $V1, 8: $V2, 13: $V3, 17: $V4, 21: $V5, 24: [1, 27], 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }), o($Ve, [2, 10], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }), { 8: $V2, 13: $V3, 15: 43, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: [1, 44] }, { 7: 45, 13: $Vu }, o($Vv, [2, 27]), o($Vv, [2, 28]), o($Vv, [2, 29]), o($Vv, [2, 30], { 49: [1, 47] }), o($Vv, [2, 31]), o($Vv, [2, 32]), { 8: $V2, 13: $V3, 15: 48, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 49, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 50, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, o($Vw, $Vx, { 8: [1, 51] }), { 13: [1, 53], 25: 52 }, o($V3, $V0, { 16: 3, 20: 4, 5: 5, 15: 6, 25: 13, 4: 54, 6: $V1, 8: $V2, 13: $V3, 17: $V4, 21: $V5, 24: [1, 55], 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }), o($V3, [2, 24]), o($V3, [2, 17]), o($V3, $V0, { 16: 3, 20: 4, 5: 5, 15: 6, 25: 13, 4: 56, 6: $V1, 8: $V2, 13: $V3, 17: $V4, 21: $V5, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }), o($V3, [2, 22]), o($V3, [2, 19]), o($V3, [2, 23]), { 8: $V2, 13: $V3, 15: 57, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 58, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 59, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 60, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 61, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 62, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 63, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 64, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 65, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 66, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 67, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 68, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 69, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 70, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 71, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, o($Ve, [2, 11], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }), { 8: $V2, 13: $V3, 15: 72, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: [1, 73] }, o([8, 10, 12], [2, 6]), { 8: $V2, 13: $V3, 15: 74, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 10: [1, 75], 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }, o($Vy, [2, 40], { 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($Vz, [2, 48], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq }), { 8: $V2, 10: $VA, 13: $V3, 14: 76, 15: 77, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, o($Vv, [2, 53], { 49: [1, 78] }), o($Vw, $Vx), o($V3, [2, 16]), o($V3, [2, 21]), o($V3, [2, 18]), o($Vy, [2, 34], { 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($Vy, [2, 35], { 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($VB, [2, 36], { 36: $Vk }), o($VB, [2, 37], { 36: $Vk }), o($VB, [2, 38], { 36: $Vk }), o($Vv, [2, 39]), o($VC, [2, 41], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($VC, [2, 42], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($VC, [2, 43], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($VC, [2, 44], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($VC, [2, 45], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($VC, [2, 46], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk }), o($Vz, [2, 47], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq }), o([1, 10, 12, 19, 23, 24, 45, 46, 47], [2, 49], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr }), { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt, 47: [1, 79] }, { 10: [1, 80], 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }, { 7: 82, 9: 81, 10: $VD, 13: $Vu }, o($VE, [2, 54], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }), o($Vv, [2, 33]), { 10: [1, 83] }, { 10: [2, 8], 12: [1, 84], 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }, { 8: $V2, 13: $V3, 15: 85, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 8: $V2, 13: $V3, 15: 86, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 11: 87, 18: $VF }, { 10: [1, 89] }, { 10: [2, 4], 12: [1, 90] }, o($Vv, [2, 51]), { 8: $V2, 10: $VA, 13: $V3, 14: 91, 15: 77, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, o($VE, [2, 52], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }), o($VE, [2, 50], { 31: $Vf, 32: $Vg, 33: $Vh, 34: $Vi, 35: $Vj, 36: $Vk, 37: $Vl, 38: $Vm, 39: $Vn, 40: $Vo, 41: $Vp, 42: $Vq, 43: $Vr, 45: $Vs, 46: $Vt }), o($VG, [2, 13], { 22: [1, 92] }), { 4: 93, 5: 5, 6: $V1, 8: $V2, 13: $V3, 15: 6, 16: 3, 17: $V4, 19: $V0, 20: 4, 21: $V5, 25: 13, 26: $V6, 27: $V7, 28: $V8, 29: $V9, 30: $Va, 32: $Vb, 44: $Vc, 48: $Vd }, { 11: 94, 18: $VF }, { 7: 82, 9: 95, 10: $VD, 13: $Vu }, { 10: [2, 7] }, { 11: 96, 18: $VF, 20: 97, 21: $V5 }, { 19: [1, 98] }, o([1, 6, 8, 13, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 44, 48], [2, 2]), { 10: [2, 3] }, o($VG, [2, 14]), o($VG, [2, 15]), o([1, 6, 8, 13, 17, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 44, 48], [2, 12])],
        defaultActions: { 2: [2, 1], 91: [2, 7], 95: [2, 3] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    }
                    else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0: /* skip whitespace */
                        break;
                    case 1:
                        return 26;
                        break;
                    case 2:
                        return '(';
                        break;
                    case 3:
                        return ')';
                        break;
                    case 4:
                        return '(';
                        break;
                    case 5:
                        return ')';
                        break;
                    case 6:
                        return '+';
                        break;
                    case 7:
                        return '-';
                        break;
                    case 8:
                        return '*';
                        break;
                    case 9:
                        return '/';
                        break;
                    case 10:
                        return '^';
                        break;
                    case 11:
                        return 'PI';
                        break;
                    case 12:
                        return 'E';
                        break;
                    case 13:
                        return ',';
                        break;
                    case 14:
                        return 'gte';
                        break;
                    case 15:
                        return 'gt';
                        break;
                    case 16:
                        return 'lte';
                        break;
                    case 17:
                        return 'lt';
                        break;
                    case 18:
                        return 'neq';
                        break;
                    case 19:
                        return 'eq';
                        break;
                    case 20:
                        return 'and';
                        break;
                    case 21:
                        return 'or';
                        break;
                    case 22:
                        return 'not';
                        break;
                    case 23:
                        return '?';
                        break;
                    case 24:
                        return ':';
                        break;
                    case 25:
                        return '%';
                        break;
                    case 26:
                        return 'let';
                        break;
                    case 27:
                        return ';';
                        break;
                    case 28:
                        return '=';
                        break;
                    case 29:
                        return 'ret';
                        break;
                    case 30:
                        return 'if';
                        break;
                    case 31:
                        return 'else';
                        break;
                    case 32:
                        return '{';
                        break;
                    case 33:
                        return '}';
                        break;
                    case 34:
                        return 'true';
                        break;
                    case 35:
                        return 'false';
                        break;
                    case 36:
                        return 'func';
                        break;
                    case 37:
                        return 13;
                        break;
                    case 38:
                        return 24;
                        break;
                }
            },
            rules: [/^(?:\s+)/i, /^(?:[0-9]+(\.[0-9]+)?\b)/i, /^(?:\()/i, /^(?:\))/i, /^(?:\()/i, /^(?:\))/i, /^(?:\+)/i, /^(?:-)/i, /^(?:\*)/i, /^(?:\/)/i, /^(?:\^)/i, /^(?:PI\b)/i, /^(?:E\b)/i, /^(?:,)/i, /^(?:>=)/i, /^(?:>)/i, /^(?:<=)/i, /^(?:<)/i, /^(?:!==)/i, /^(?:==)/i, /^(?:&&)/i, /^(?:\|\|)/i, /^(?:!)/i, /^(?:\?)/i, /^(?::)/i, /^(?:%)/i, /^(?:let\b)/i, /^(?:;)/i, /^(?:=)/i, /^(?:return\b)/i, /^(?:if\b)/i, /^(?:else\b)/i, /^(?:\{)/i, /^(?:\})/i, /^(?:true\b)/i, /^(?:false\b)/i, /^(?:function\b)/i, /^(?:[\w\d]+)/i, /^(?:$)/i],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
module.exports = parser;

},{}],"/dist/expression":[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parser = require("./parser");
function build(exp, ...args) {
    let inArgs = [...args].map(arg => '__' + arg);
    let p = parser;
    exp.trim();
    if (exp[exp.length - 1] == ';') {
        exp = exp.slice(0, exp.length - 1);
    }
    let ast = p.parse(exp);
    // console.log(JSON.stringify(ast, null, 2));
    let code;
    if (ast.children.length == 1 && ast.children[0].type == 'stmt') {
        code = 'return ' + compile(ast, new context(inArgs.slice(), []));
    }
    else {
        code = compile(ast, new context(inArgs.slice(), []));
    }
    inArgs.push(code);
    return new Function(...inArgs);
}
exports.build = build;
class context {
    constructor(varList, funcList) {
        this.varSet = {};
        this.funcSet = {};
        varList.forEach(v => this.varSet[v] = true);
        funcList.forEach(v => this.funcSet[v] = true);
    }
    setVar(v) {
        this.varSet[v] = true;
    }
    hasVar(v) {
        return !!(this.varSet[v]) || (this.parent && this.parent.hasVar(v));
    }
    setFunc(v) {
        this.funcSet[v] = true;
    }
    hasFunc(v) {
        return !!(this.funcSet[v]) || (this.parent && this.parent.hasFunc(v));
    }
    fork() {
        let c = new context([], []);
        c.parent = this;
        return c;
    }
}
function compile(node, ctx) {
    switch (node.type) {
        case 'statements': {
            return node.children.map(x => compile(x, ctx)).join('\n');
        }
        case 'stmt': {
            if (node.children.length == 0) {
                return '';
            }
            return compile(node.children[0], ctx) + ';';
        }
        case 'ret_stmt': {
            return 'return ' + compile(node.children[0], ctx) + ';';
        }
        case 'block': {
            return `{\n${compile(node.children[0], ctx.fork())}\n}`;
        }
        case 'if': {
            return `if(${compile(node.children[0], ctx)})${compile(node.children[1], ctx)}`;
        }
        case 'if_else': {
            return `if(${compile(node.children[0], ctx)})${compile(node.children[1], ctx)}else ${compile(node.children[2], ctx)}`;
        }
        case 'declare': {
            ctx.setVar(node.name);
            return `let ${node.name}`;
        }
        case 'assign': {
            if (!(ctx.hasVar(node.name))) {
                throw new Error("undefined variable " + node.name);
            }
            return `${node.name}=${compile(node.children[0], ctx)}`;
        }
        case 'declare_assign': {
            ctx.setVar(node.name);
            return `let ${node.name}=${compile(node.children[0], ctx)}`;
        }
        case 'func': {
            let f = Math[node.name];
            if (f) {
                return 'Math.' + node.name + '(' + node.children.map(x => compile(x, ctx)).join(',') + ')';
            }
            f = ctx.hasFunc('__' + node.name);
            if (!f) {
                throw new Error("Not support function " + node.name);
            }
            return '__' + node.name + '(' + node.children.map(x => compile(x, ctx)).join(',') + ')';
        }
        case 'const': {
            return node.value.toString();
        }
        case 'plus': {
            return compile(node.children[0], ctx) + '+' + compile(node.children[1], ctx);
        }
        case 'minus': {
            return compile(node.children[0], ctx) + '-' + compile(node.children[1], ctx);
        }
        case 'mul': {
            return compile(node.children[0], ctx) + '*' + compile(node.children[1], ctx);
        }
        case 'div': {
            return compile(node.children[0], ctx) + '/' + compile(node.children[1], ctx);
        }
        case 'uminus': {
            return '-' + compile(node.children[0], ctx);
        }
        case 'pow': {
            return 'Math.pow(' + compile(node.children[0], ctx) + ',' + compile(node.children[1], ctx) + ')';
        }
        case 'var': {
            if (!ctx.hasVar(node.name)) {
                throw new Error("undefined variable " + node.name);
            }
            return node.name;
        }
        case 'lt': {
            return `${compile(node.children[0], ctx)}<${compile(node.children[1], ctx)}`;
        }
        case 'lte': {
            return `${compile(node.children[0], ctx)}<=${compile(node.children[1], ctx)}`;
        }
        case 'gt': {
            return `${compile(node.children[0], ctx)}>${compile(node.children[1], ctx)}`;
        }
        case 'gte': {
            return `${compile(node.children[0], ctx)}>=${compile(node.children[1], ctx)}`;
        }
        case 'eq': {
            return `${compile(node.children[0], ctx)}==${compile(node.children[1], ctx)}`;
        }
        case 'neq': {
            return `${compile(node.children[0], ctx)}!==${compile(node.children[1], ctx)}`;
        }
        case 'and': {
            return `${compile(node.children[0], ctx)}&&${compile(node.children[1], ctx)}`;
        }
        case 'or': {
            return `${compile(node.children[0], ctx)}||${compile(node.children[1], ctx)}`;
        }
        case 'not': {
            return `!${compile(node.children[0], ctx)}`;
        }
        case 'tri': {
            return `${compile(node.children[0], ctx)}?${compile(node.children[1], ctx)}:${compile(node.children[2], ctx)}`;
        }
        case 'bracket': {
            return `(${compile(node.children[0], ctx)})`;
        }
        case 'mod': {
            return `${compile(node.children[0], ctx)}%${compile(node.children[1], ctx)}`;
        }
        case 'function': {
            ctx.setFunc('__' + node.name);
            let c = ctx.fork();
            node.args.forEach(a => c.setVar('__' + a));
            return `function __${node.name}(${node.args.map(a => '__' + a).join(',')})${compile(node.body, c)}`;
        }
        default: {
            throw new Error("Not support node type " + node.type);
        }
    }
}

},{"./parser":1}]},{},[]);
